Pre-Requisites
    • Development Environment to be created by using the basic tools. i.e. Kops CLI, Docker and Kubectl 
    • Download and Install latest version of KOPS CLI
    • Correct version of Kubernetes binary distribution is needed for creating a cluster. This can be made easy by using KOPS CLI, which takes care of downloading the right Kubernetes binary in the cloud, and provisions the cluster. 
Run the Below commands to Install kubectl 
$ curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl 
$ chmod +x ./kubectl 
$ sudo mv ./kubectl /usr/local/bin/kubectl 
Run the Below commands to Install kops 
$ wget https://github.com/kubernetes/kops/releases/download/1.6.1/kops-linux-amd64 
$ chmod +x kops-linux-amd64 
$ sudo mv kops-linux-amd64 /usr/local/bin/kops 
Run the Below commands to Install Docker 
$ sudo apt-get install docker.io 
Create role in AWS IAM service and provide needful permissions 
Using the AWS IAM security service, create IAM user and provide sufficient permission to the User to create the Kubernetes cluster.  
The IAM user must have the following permissions: 
    • AmazonEC2FullAccess 
    • AmazonRoute53FullAccess 
    • AmazonS3FullAccess 
    • IAMFullAccess 
    • AmazonVPCFullAccess
  


Create an Amazon S3 bucket for the Kubernetes state store
Kops needs a “state store” to store configuration information of the cluster.  For example, how many nodes, instance type of each node, and Kubernetes version. The state is stored during the initial cluster creation. Any subsequent changes to the cluster are also persisted to this store as well. As of publication, Amazon S3 is the only supported storage mechanism. Create a S3 bucket and pass that to the kops CLI during cluster creation.
This POC uses the bucket name bucketkops.
Create an S3 bucket:
$ aws s3api create-bucket --bucket bucketkops
Versioning is enabled for this bucket, so that rollback to a previous version of the cluster can be done easily. This can be enabled by using the AWS CLI Command as below:
$ aws s3api put-bucket-versioning --bucket bucketkops --versioning-configuration Status=Enabled
$ aws configure – set access key,secret access key,region
$ aws s3 ls – list out the S3 buckets available

For convenience/maintain state, KOPS_STATE_STORE environment variable can also defined; pointing to the S3 bucket.
$ export KOPS_STATE_STORE=s3://bucketkops







DNS configuration
Kubernetes makes use of DNS for discovery within the cluster so that kubernetes-API-server can be reached out from clients.
Create a hosted zone on Route53, say, kopspoc.tk, So that the API server endpoint will then be kopspoc.tk

Below is the Hosted Zone for the Cluster kopspoc.tk:


Click on the Cluster name kopspoc.tk, to navigate and verify the record sets created in the cluster:

As of Kops 1.6.1, a top-level domain or a subdomain is required to create the cluster. This domain allows the worker nodes to discover the master and the master to discover all the etcd servers. This is also needed for kubectl to be able to talk directly with the master.
This domain may be registered with AWS DNS service (i.e. a Route 53 hosted zone is created). Alternatively, this domain may be at a different registrar. In this case, create a Route 53 hosted zone. Specify the name server (NS) records from the created zone, exactly same as NS records with the domain registrar.
